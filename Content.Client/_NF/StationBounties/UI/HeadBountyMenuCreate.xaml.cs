using System.Linq;
using Content.Shared.StationBounties;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client._NF.StationBounties.UI;

[GenerateTypedNameReferences]
public sealed partial class HeadBountyMenuCreate : Control
{
    private List<PossibleTargetInfo> _targets = new();
    private List<string> _vessels = new();

    public const int MinimalReward = 10000;

    public HeadBountyMenuCreate()
    {
        RobustXamlLoader.Load(this);
        NameSelector.OnItemSelected += (opt) => OnNameSelected(opt.Id);
        VeselSelector.OnItemSelected += (opt) => OnVesselSelected(opt.Id);

        CustomNameButton.OnToggled += OnCustomNameToggle;
        CustomVeselButton.OnToggled += OnCustomVeselToggle;
        RewardEdit.OnTextChanged += OnPriceChanged;

        var descPlaceholder = Loc.GetString("bounty-contracts-ui-create-description-placeholder");
        DescriptionEdit.Placeholder = new Rope.Leaf(descPlaceholder);
        RewardEdit.Text = MinimalReward.ToString();

        UpdateContract();
    }

    private void OnPriceChanged(LineEdit.LineEditEventArgs obj)
    {
        UpdateContract();
    }

    public void SetPossibleTargets(List<PossibleTargetInfo> targets)
    {
        // make sure that all targets sorted by names alphabetically
        _targets = targets.OrderBy(target => target.Name).ToList();

        // update names dropdown
        NameSelector.Clear();
        for (var i = 0; i < _targets.Count; i++)
        {
            NameSelector.AddItem(_targets[i].Name, i);
        }

        // set selector to first option
        OnNameSelected(0);
    }

    public void SetVessels(List<string> vessels)
    {
        // make sure that all ships sorted by names alphabetically
        vessels.Sort();

        // add unknown option as a first option
        vessels.Insert(0, Loc.GetString("bounty-contracts-ui-create-vesel-unknown"));
        _vessels = vessels;

        // update ships dropdown
        VeselSelector.Clear();
        for (var i = 0; i < _vessels.Count; i++)
        {
            VeselSelector.AddItem(_vessels[i], i);
        }

        // set vessel to unknown
        OnVesselSelected(0);
    }

    private void UpdateDna(string? dnaStr)
    {
        DnaLabel.Text = dnaStr ?? Loc.GetString("bounty-contracts-ui-create-dna-unknown");
    }

    private void OnNameSelected(int itemIndex)
    {
        if (itemIndex >= NameSelector.ItemCount)
            return;

        NameSelector.SelectId(itemIndex);

        // update dna
        var selectedTarget = _targets[itemIndex];
        var dnaStr = selectedTarget.DNA;
        UpdateDna(dnaStr);

        UpdateContract();
    }

    private void OnVesselSelected(int itemIndex)
    {
        if (itemIndex >= VeselSelector.ItemCount)
            return;

        VeselSelector.SelectId(itemIndex);
    }

    private void OnCustomNameToggle(BaseButton.ButtonToggledEventArgs customToggle)
    {
        NameSelector.Visible = !customToggle.Pressed;
        NameEdit.Visible = customToggle.Pressed;
        UpdateDna(null);
    }

    private void OnCustomVeselToggle(BaseButton.ButtonToggledEventArgs customToggle)
    {
        VeselSelector.Visible = !customToggle.Pressed;
        VeselEdit.Visible = customToggle.Pressed;

        OnVesselSelected(0);
    }

    private void UpdateContract()
    {
        // check if price is valid
        var priceStr = RewardEdit.Text;
        if (!int.TryParse(priceStr, out var price) || price < MinimalReward)
        {
            var err = Loc.GetString("bounty-contracts-ui-create-error-too-cheap",
                ("reward", MinimalReward));
            DisclaimerLabel.SetMessage(err);
            CreateButton.Disabled = true;
            return;
        }

        // all looks good
        DisclaimerLabel.SetMessage(Loc.GetString("bounty-contracts-ui-create-ready"));
        CreateButton.Disabled = false;
    }
}
