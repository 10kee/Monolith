using System.Linq;
using Content.Shared.StationBounties;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._NF.StationBounties.UI;

[GenerateTypedNameReferences]
public sealed partial class HeadBountyMenuCreate : Control
{
    private List<PossibleTargetInfo> _targets = new();
    private List<string> _vessels = new();

    public HeadBountyMenuCreate()
    {
        RobustXamlLoader.Load(this);
        NameSelector.OnItemSelected += (opt) => OnNameSelected(opt.Id);
        VeselSelector.OnItemSelected += (opt) => OnVesselSelected(opt.Id);

        CustomNameButton.OnToggled += OnCustomNameToggle;
        CustomVeselButton.OnToggled += OnCustomVeselToggle;
        PriceEdit.OnTextChanged += OnPriceChanged;

        UpdateContract();
    }

    private void OnPriceChanged(LineEdit.LineEditEventArgs obj)
    {
        UpdateContract();
    }

    public void SetPossibleTargets(List<PossibleTargetInfo> targets)
    {
        // make sure that all targets sorted by names alphabetically
        _targets = targets.OrderBy(target => target.Name).ToList();

        // update names dropdown
        NameSelector.Clear();
        for (var i = 0; i < _targets.Count; i++)
        {
            NameSelector.AddItem(_targets[i].Name, i);
        }

        // set selector to first option
        OnNameSelected(0);
    }

    public void SetVessels(List<string> vessels)
    {
        // make sure that all ships sorted by names alphabetically
        vessels.Sort();

        // add unknown option as a first option
        vessels.Insert(0, Loc.GetString("Unknown"));
        _vessels = vessels;

        // update ships dropdown
        VeselSelector.Clear();
        for (var i = 0; i < _vessels.Count; i++)
        {
            VeselSelector.AddItem(_vessels[i], i);
        }

        // set vessel to unknown
        OnVesselSelected(0);
    }

    private void OnNameSelected(int itemIndex)
    {
        if (itemIndex >= NameSelector.ItemCount)
            return;

        NameSelector.SelectId(itemIndex);

        // update dna
        var selectedTarget = _targets[itemIndex];
        var dnaStr = selectedTarget.DNA;
        DnaLabel.Text = dnaStr ?? Loc.GetString("N/A");

        UpdateContract();
    }

    private void OnVesselSelected(int itemIndex)
    {
        if (itemIndex >= VeselSelector.ItemCount)
            return;

        VeselSelector.SelectId(itemIndex);
    }

    private void OnCustomNameToggle(BaseButton.ButtonToggledEventArgs customToggle)
    {
        NameSelector.Visible = !customToggle.Pressed;
        NameEdit.Visible = customToggle.Pressed;

        OnNameSelected(0);
    }

    private void OnCustomVeselToggle(BaseButton.ButtonToggledEventArgs customToggle)
    {
        VeselSelector.Visible = !customToggle.Pressed;
        VeselEdit.Visible = customToggle.Pressed;

        OnVesselSelected(0);
    }

    private void UpdateContract()
    {
        // check if price is valid
        var priceStr = PriceEdit.Text;
        if (!int.TryParse(priceStr, out var price) || price < 10000)
        {
            DisclaimerLabel.SetMessage(Loc.GetString("Error: Invalid price! Minimal contract price is 10000$"));
            CreateButton.Disabled = true;
            return;
        }

        // does target has proper name?
        if (CustomNameButton.Pressed)
        {
            DisclaimerLabel.SetMessage(Loc.GetString("Warning: Your contract targets name can't be found in database!" +
                                                     "It won't be prepaid. You would need to pay contract manually!"));
            CreateButton.Disabled = false;
            return;
        }

        // does target has proper DNA?
        var ind = NameSelector.SelectedId;
        if (ind >= _targets.Count || _targets[ind].DNA == null)
        {
            DisclaimerLabel.SetMessage(Loc.GetString("Warning: Your contract targets DNA can't be found in database!" +
                                                     "It won't be prepaid. You would need to pay contract manually!"));
            CreateButton.Disabled = false;
            return;
        }

        // all looks good - make contract prepaid
        DisclaimerLabel.SetMessage(Loc.GetString("Your contract will be prepaid! Agent will receive its reward automatically."));
        CreateButton.Disabled = false;
    }
}
